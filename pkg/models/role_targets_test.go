// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRoleTargets(t *testing.T) {
	t.Parallel()

	query := RoleTargets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRoleTargetsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTarget{}
	if err = randomize.Struct(seed, o, roleTargetDBTypes, true, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleTargets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleTargetsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTarget{}
	if err = randomize.Struct(seed, o, roleTargetDBTypes, true, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RoleTargets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleTargets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleTargetsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTarget{}
	if err = randomize.Struct(seed, o, roleTargetDBTypes, true, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoleTargetSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleTargets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleTargetsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTarget{}
	if err = randomize.Struct(seed, o, roleTargetDBTypes, true, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RoleTargetExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RoleTarget exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoleTargetExists to return true, but got false.")
	}
}

func testRoleTargetsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTarget{}
	if err = randomize.Struct(seed, o, roleTargetDBTypes, true, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	roleTargetFound, err := FindRoleTarget(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if roleTargetFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRoleTargetsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTarget{}
	if err = randomize.Struct(seed, o, roleTargetDBTypes, true, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RoleTargets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRoleTargetsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTarget{}
	if err = randomize.Struct(seed, o, roleTargetDBTypes, true, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RoleTargets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoleTargetsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleTargetOne := &RoleTarget{}
	roleTargetTwo := &RoleTarget{}
	if err = randomize.Struct(seed, roleTargetOne, roleTargetDBTypes, false, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}
	if err = randomize.Struct(seed, roleTargetTwo, roleTargetDBTypes, false, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roleTargetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roleTargetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoleTargets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoleTargetsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	roleTargetOne := &RoleTarget{}
	roleTargetTwo := &RoleTarget{}
	if err = randomize.Struct(seed, roleTargetOne, roleTargetDBTypes, false, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}
	if err = randomize.Struct(seed, roleTargetTwo, roleTargetDBTypes, false, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roleTargetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roleTargetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleTargets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func roleTargetBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleTarget) error {
	*o = RoleTarget{}
	return nil
}

func roleTargetAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleTarget) error {
	*o = RoleTarget{}
	return nil
}

func roleTargetAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RoleTarget) error {
	*o = RoleTarget{}
	return nil
}

func roleTargetBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RoleTarget) error {
	*o = RoleTarget{}
	return nil
}

func roleTargetAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RoleTarget) error {
	*o = RoleTarget{}
	return nil
}

func roleTargetBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RoleTarget) error {
	*o = RoleTarget{}
	return nil
}

func roleTargetAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RoleTarget) error {
	*o = RoleTarget{}
	return nil
}

func roleTargetBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleTarget) error {
	*o = RoleTarget{}
	return nil
}

func roleTargetAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleTarget) error {
	*o = RoleTarget{}
	return nil
}

func testRoleTargetsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RoleTarget{}
	o := &RoleTarget{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, roleTargetDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RoleTarget object: %s", err)
	}

	AddRoleTargetHook(boil.BeforeInsertHook, roleTargetBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	roleTargetBeforeInsertHooks = []RoleTargetHook{}

	AddRoleTargetHook(boil.AfterInsertHook, roleTargetAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	roleTargetAfterInsertHooks = []RoleTargetHook{}

	AddRoleTargetHook(boil.AfterSelectHook, roleTargetAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	roleTargetAfterSelectHooks = []RoleTargetHook{}

	AddRoleTargetHook(boil.BeforeUpdateHook, roleTargetBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	roleTargetBeforeUpdateHooks = []RoleTargetHook{}

	AddRoleTargetHook(boil.AfterUpdateHook, roleTargetAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	roleTargetAfterUpdateHooks = []RoleTargetHook{}

	AddRoleTargetHook(boil.BeforeDeleteHook, roleTargetBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	roleTargetBeforeDeleteHooks = []RoleTargetHook{}

	AddRoleTargetHook(boil.AfterDeleteHook, roleTargetAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	roleTargetAfterDeleteHooks = []RoleTargetHook{}

	AddRoleTargetHook(boil.BeforeUpsertHook, roleTargetBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	roleTargetBeforeUpsertHooks = []RoleTargetHook{}

	AddRoleTargetHook(boil.AfterUpsertHook, roleTargetAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	roleTargetAfterUpsertHooks = []RoleTargetHook{}
}

func testRoleTargetsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTarget{}
	if err = randomize.Struct(seed, o, roleTargetDBTypes, true, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleTargets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleTargetsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTarget{}
	if err = randomize.Struct(seed, o, roleTargetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(roleTargetColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RoleTargets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleTargetToOneRoleUsingRole(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RoleTarget
	var foreign Role

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roleTargetDBTypes, false, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleDBTypes, false, roleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Role struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RoleID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Role().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RoleTargetSlice{&local}
	if err = local.L.LoadRole(ctx, tx, false, (*[]*RoleTarget)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Role == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Role = nil
	if err = local.L.LoadRole(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Role == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRoleTargetToOneSetOpRoleUsingRole(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleTarget
	var b, c Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleTargetDBTypes, false, strmangle.SetComplement(roleTargetPrimaryKeyColumns, roleTargetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Role{&b, &c} {
		err = a.SetRole(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Role != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoleTargets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RoleID != x.ID {
			t.Error("foreign key was wrong value", a.RoleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RoleID))
		reflect.Indirect(reflect.ValueOf(&a.RoleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RoleID != x.ID {
			t.Error("foreign key was wrong value", a.RoleID, x.ID)
		}
	}
}

func testRoleTargetsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTarget{}
	if err = randomize.Struct(seed, o, roleTargetDBTypes, true, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoleTargetsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTarget{}
	if err = randomize.Struct(seed, o, roleTargetDBTypes, true, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoleTargetSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoleTargetsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTarget{}
	if err = randomize.Struct(seed, o, roleTargetDBTypes, true, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoleTargets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	roleTargetDBTypes = map[string]string{`ID`: `bigint`, `Target`: `text`, `RoleID`: `bigint`}
	_                 = bytes.MinRead
)

func testRoleTargetsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(roleTargetPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(roleTargetAllColumns) == len(roleTargetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoleTarget{}
	if err = randomize.Struct(seed, o, roleTargetDBTypes, true, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleTargets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roleTargetDBTypes, true, roleTargetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRoleTargetsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(roleTargetAllColumns) == len(roleTargetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoleTarget{}
	if err = randomize.Struct(seed, o, roleTargetDBTypes, true, roleTargetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleTargets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roleTargetDBTypes, true, roleTargetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(roleTargetAllColumns, roleTargetPrimaryKeyColumns) {
		fields = roleTargetAllColumns
	} else {
		fields = strmangle.SetComplement(
			roleTargetAllColumns,
			roleTargetPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RoleTargetSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRoleTargetsUpsert(t *testing.T) {
	t.Parallel()

	if len(roleTargetAllColumns) == len(roleTargetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RoleTarget{}
	if err = randomize.Struct(seed, &o, roleTargetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoleTarget: %s", err)
	}

	count, err := RoleTargets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, roleTargetDBTypes, false, roleTargetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleTarget struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoleTarget: %s", err)
	}

	count, err = RoleTargets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
